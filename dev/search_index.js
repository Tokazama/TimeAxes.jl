var documenterSearchIndex = {"docs":
[{"location":"#TimeAxes-1","page":"TimeAxes","title":"TimeAxes","text":"","category":"section"},{"location":"#Examples-1","page":"TimeAxes","title":"Examples","text":"","category":"section"},{"location":"#API-1","page":"TimeAxes","title":"API","text":"","category":"section"},{"location":"#","page":"TimeAxes","title":"TimeAxes","text":"Modules = [TimeAxes]","category":"page"},{"location":"#TimeAxes.TimeAxes","page":"TimeAxes","title":"TimeAxes.TimeAxes","text":"TimeAxes\n\n(Image: Build Status) (Image: codecov)\n\nThis package utilizes AxisIndices to interface with data that has a time axis.\n\njulia> using TimeAxes, Dates\n\njulia> t = TimeAxis(Second(1):Second(1):Second(10))\nTimeAxis(1 second:1 second:10 seconds => Base.OneTo(10))\n\njulia> t2 = t[Second(1)..Second(3)]  # index by time interval\nTimeAxis(1 second:1 second:3 seconds => 1:3)\n\njulia> t[:ts1] = Second(1);\n\njulia> t[:ts2] = Second(3);\n\njulia> t2 = t[:ts1..:ts2]  # index by interval between two time stamps\nTimeAxis(1 second:1 second:3 seconds => 1:3)\n\njulia> t[>(:ts2)] == t[>(Second(3))]  # all time points above :ts2 and 3 seconds returns the same thing\ntrue\n\njulia> x = AxisArray(ones(10, 2), t)\n10×2 AxisArray{Float64,2}\n • dim_1 - 1 second:1 second:10 seconds\n • dim_2 - 1:2\n                 1     2\n    1 second   1.0   1.0\n   2 seconds   1.0   1.0\n   3 seconds   1.0   1.0\n   4 seconds   1.0   1.0\n   5 seconds   1.0   1.0\n   6 seconds   1.0   1.0\n   7 seconds   1.0   1.0\n   8 seconds   1.0   1.0\n   9 seconds   1.0   1.0\n  10 seconds   1.0   1.0\n\njulia> x[:ts1..:ts2,:]\n3×2 AxisArray{Float64,2}\n • dim_1 - 1 second:1 second:3 seconds\n • dim_2 - 1:2\n                1     2\n   1 second   1.0   1.0\n  2 seconds   1.0   1.0\n  3 seconds   1.0   1.0\n\n\n\n\n\n\n","category":"module"},{"location":"#TimeAxes.TimeAxis","page":"TimeAxes","title":"TimeAxes.TimeAxis","text":"TimeAxis\n\nSubtype of AbstractAxis which can store timestamps to corresponding time keys.\n\n\n\n\n\n","category":"type"},{"location":"#TimeAxes.assert_timedim_last-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.assert_timedim_last","text":"assert_timedim_last(x)\n\nThrow an error if the x has a time dimension that is not the last dimension.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.duration-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.duration","text":"duration(x)\n\nDuration of the event along the time axis.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.has_timedim-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.has_timedim","text":"has_timedim(x) -> Bool\n\nReturns true if x has a dimension corresponding to time.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.lag-Tuple{AbstractArray,Int64}","page":"TimeAxes","title":"TimeAxes.lag","text":"lag(A::AbstractArray, n::Integer)\n\nShift the elements of A along the time axis so that they are n time units later.\n\njulia> using TimeAxes\n\njulia> using Unitful: s\n\njulia> A = NamedAxisArray{(:time,)}(collect(1:5), (1:5)s)\n5-element NamedAxisArray{Int64,1}\n • time - 1 s:1 s:5 s\n\n  1 s   1\n  2 s   2\n  3 s   3\n  4 s   4\n  5 s   5\n\njulia> lag(A, 1)\n4-element AxisArray{Int64,1}\n • dim_1 - 2 s:1 s:5 s\n\n  2 s   1\n  3 s   2\n  4 s   3\n  5 s   4\n\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.lead-Tuple{AbstractArray,Int64}","page":"TimeAxes","title":"TimeAxes.lead","text":"lead(A::AbstractArray, n::Integer)\n\nShift the elements of A along the time axis so that they are n time units sooner.\n\njulia> using TimeAxes\n\njulia> using Unitful: s\n\njulia> A = NamedAxisArray{(:time,)}(collect(1:5), (1:5)s)\n5-element NamedAxisArray{Int64,1}\n • time - 1 s:1 s:5 s\n\n  1 s   1\n  2 s   2\n  3 s   3\n  4 s   4\n  5 s   5\n\njulia> lead(A, 1)\n4-element AxisArray{Int64,1}\n • dim_1 - 1 s:1 s:4 s\n\n  1 s   2\n  2 s   3\n  3 s   4\n  4 s   5\n\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.ntime-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.ntime","text":"ntime(x) -> Int\n\nReturns the size along the dimension corresponding to the time.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.onset-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.onset","text":"onset(x)\n\nFirst time point along the time axis.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.sampling_rate-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.sampling_rate","text":"sampling_rate(x)\n\nNumber of samples per second.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.select_timedim-Tuple{Any,Any}","page":"TimeAxes","title":"TimeAxes.select_timedim","text":"select_timedim(x, i)\n\nReturn a view of all the data of x where the index for the time dimension equals i.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.time_axis-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.time_axis","text":"time_axis(x)\n\nReturns the axis corresponding to the time dimension.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.time_axis_type-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.time_axis_type","text":"time_axis_type(x)\n\nReturns the key type corresponding to the time axis.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.time_end-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.time_end","text":"time_end(x)\n\nLast time point along the time axis.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.time_indices-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.time_indices","text":"time_indices(x)\n\nReturns the indices corresponding to the time axis\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.time_keys-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.time_keys","text":"time_keys(x)\n\nReturns the keys corresponding to the time axis\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.timedim-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.timedim","text":"timedim(x) -> Int\n\nReturns the dimension corresponding to the time.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.each_time-Tuple{Any}","page":"TimeAxes","title":"TimeAxes.each_time","text":"each_time(x)\n\nCreate a generator that iterates over the time dimensions A, returning views that select all the data from the other dimensions in A.\n\n\n\n\n\n","category":"method"},{"location":"#TimeAxes.to_timestamp-Tuple{TimeAxis,Any}","page":"TimeAxes","title":"TimeAxes.to_timestamp","text":"to_timestamp(axis::TimeAxis, key)\n\nReturns a timestamp where key corresponds to a key-value pair for the timestamps of axis.\n\n\n\n\n\n","category":"method"}]
}
